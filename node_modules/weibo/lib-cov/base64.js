/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['base64.js']) {
  _$jscoverage['base64.js'] = [];
  _$jscoverage['base64.js'][10] = 0;
  _$jscoverage['base64.js'][12] = 0;
  _$jscoverage['base64.js'][19] = 0;
  _$jscoverage['base64.js'][20] = 0;
  _$jscoverage['base64.js'][21] = 0;
  _$jscoverage['base64.js'][23] = 0;
  _$jscoverage['base64.js'][25] = 0;
  _$jscoverage['base64.js'][27] = 0;
  _$jscoverage['base64.js'][28] = 0;
  _$jscoverage['base64.js'][29] = 0;
  _$jscoverage['base64.js'][31] = 0;
  _$jscoverage['base64.js'][32] = 0;
  _$jscoverage['base64.js'][33] = 0;
  _$jscoverage['base64.js'][34] = 0;
  _$jscoverage['base64.js'][36] = 0;
  _$jscoverage['base64.js'][37] = 0;
  _$jscoverage['base64.js'][38] = 0;
  _$jscoverage['base64.js'][39] = 0;
  _$jscoverage['base64.js'][42] = 0;
  _$jscoverage['base64.js'][48] = 0;
  _$jscoverage['base64.js'][53] = 0;
  _$jscoverage['base64.js'][54] = 0;
  _$jscoverage['base64.js'][55] = 0;
  _$jscoverage['base64.js'][56] = 0;
  _$jscoverage['base64.js'][58] = 0;
  _$jscoverage['base64.js'][60] = 0;
  _$jscoverage['base64.js'][62] = 0;
  _$jscoverage['base64.js'][63] = 0;
  _$jscoverage['base64.js'][64] = 0;
  _$jscoverage['base64.js'][65] = 0;
  _$jscoverage['base64.js'][67] = 0;
  _$jscoverage['base64.js'][68] = 0;
  _$jscoverage['base64.js'][69] = 0;
  _$jscoverage['base64.js'][71] = 0;
  _$jscoverage['base64.js'][73] = 0;
  _$jscoverage['base64.js'][74] = 0;
  _$jscoverage['base64.js'][76] = 0;
  _$jscoverage['base64.js'][77] = 0;
  _$jscoverage['base64.js'][82] = 0;
  _$jscoverage['base64.js'][84] = 0;
  _$jscoverage['base64.js'][90] = 0;
  _$jscoverage['base64.js'][91] = 0;
  _$jscoverage['base64.js'][93] = 0;
  _$jscoverage['base64.js'][95] = 0;
  _$jscoverage['base64.js'][97] = 0;
  _$jscoverage['base64.js'][98] = 0;
  _$jscoverage['base64.js'][100] = 0;
  _$jscoverage['base64.js'][101] = 0;
  _$jscoverage['base64.js'][102] = 0;
  _$jscoverage['base64.js'][105] = 0;
  _$jscoverage['base64.js'][106] = 0;
  _$jscoverage['base64.js'][107] = 0;
  _$jscoverage['base64.js'][112] = 0;
  _$jscoverage['base64.js'][117] = 0;
  _$jscoverage['base64.js'][118] = 0;
  _$jscoverage['base64.js'][119] = 0;
  _$jscoverage['base64.js'][121] = 0;
  _$jscoverage['base64.js'][123] = 0;
  _$jscoverage['base64.js'][125] = 0;
  _$jscoverage['base64.js'][126] = 0;
  _$jscoverage['base64.js'][127] = 0;
  _$jscoverage['base64.js'][129] = 0;
  _$jscoverage['base64.js'][130] = 0;
  _$jscoverage['base64.js'][131] = 0;
  _$jscoverage['base64.js'][132] = 0;
  _$jscoverage['base64.js'][135] = 0;
  _$jscoverage['base64.js'][136] = 0;
  _$jscoverage['base64.js'][137] = 0;
  _$jscoverage['base64.js'][138] = 0;
  _$jscoverage['base64.js'][141] = 0;
  _$jscoverage['base64.js'][159] = 0;
  _$jscoverage['base64.js'][160] = 0;
  _$jscoverage['base64.js'][161] = 0;
  _$jscoverage['base64.js'][162] = 0;
  _$jscoverage['base64.js'][163] = 0;
  _$jscoverage['base64.js'][165] = 0;
  _$jscoverage['base64.js'][167] = 0;
  _$jscoverage['base64.js'][168] = 0;
  _$jscoverage['base64.js'][169] = 0;
  _$jscoverage['base64.js'][170] = 0;
  _$jscoverage['base64.js'][172] = 0;
  _$jscoverage['base64.js'][173] = 0;
  _$jscoverage['base64.js'][175] = 0;
  _$jscoverage['base64.js'][180] = 0;
  _$jscoverage['base64.js'][181] = 0;
  _$jscoverage['base64.js'][183] = 0;
  _$jscoverage['base64.js'][184] = 0;
  _$jscoverage['base64.js'][185] = 0;
  _$jscoverage['base64.js'][186] = 0;
  _$jscoverage['base64.js'][188] = 0;
}
_$jscoverage['base64.js'][10]++;
(function () {
  _$jscoverage['base64.js'][12]++;
  var Base64 = {_keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", encode: (function (input) {
  _$jscoverage['base64.js'][19]++;
  var output = "";
  _$jscoverage['base64.js'][20]++;
  var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
  _$jscoverage['base64.js'][21]++;
  var i = 0;
  _$jscoverage['base64.js'][23]++;
  input = Base64._utf8_encode(input);
  _$jscoverage['base64.js'][25]++;
  while (i < input.length) {
    _$jscoverage['base64.js'][27]++;
    chr1 = input.charCodeAt(i++);
    _$jscoverage['base64.js'][28]++;
    chr2 = input.charCodeAt(i++);
    _$jscoverage['base64.js'][29]++;
    chr3 = input.charCodeAt(i++);
    _$jscoverage['base64.js'][31]++;
    enc1 = chr1 >> 2;
    _$jscoverage['base64.js'][32]++;
    enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
    _$jscoverage['base64.js'][33]++;
    enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
    _$jscoverage['base64.js'][34]++;
    enc4 = chr3 & 63;
    _$jscoverage['base64.js'][36]++;
    if (isNaN(chr2)) {
      _$jscoverage['base64.js'][37]++;
      enc3 = enc4 = 64;
    }
    else {
      _$jscoverage['base64.js'][38]++;
      if (isNaN(chr3)) {
        _$jscoverage['base64.js'][39]++;
        enc4 = 64;
      }
    }
    _$jscoverage['base64.js'][42]++;
    output = output + this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) + this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);
}
  _$jscoverage['base64.js'][48]++;
  return output;
}), decode: (function (input) {
  _$jscoverage['base64.js'][53]++;
  var output = "";
  _$jscoverage['base64.js'][54]++;
  var chr1, chr2, chr3;
  _$jscoverage['base64.js'][55]++;
  var enc1, enc2, enc3, enc4;
  _$jscoverage['base64.js'][56]++;
  var i = 0;
  _$jscoverage['base64.js'][58]++;
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
  _$jscoverage['base64.js'][60]++;
  while (i < input.length) {
    _$jscoverage['base64.js'][62]++;
    enc1 = this._keyStr.indexOf(input.charAt(i++));
    _$jscoverage['base64.js'][63]++;
    enc2 = this._keyStr.indexOf(input.charAt(i++));
    _$jscoverage['base64.js'][64]++;
    enc3 = this._keyStr.indexOf(input.charAt(i++));
    _$jscoverage['base64.js'][65]++;
    enc4 = this._keyStr.indexOf(input.charAt(i++));
    _$jscoverage['base64.js'][67]++;
    chr1 = (enc1 << 2) | (enc2 >> 4);
    _$jscoverage['base64.js'][68]++;
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    _$jscoverage['base64.js'][69]++;
    chr3 = ((enc3 & 3) << 6) | enc4;
    _$jscoverage['base64.js'][71]++;
    output = output + String.fromCharCode(chr1);
    _$jscoverage['base64.js'][73]++;
    if (enc3 != 64) {
      _$jscoverage['base64.js'][74]++;
      output = output + String.fromCharCode(chr2);
    }
    _$jscoverage['base64.js'][76]++;
    if (enc4 != 64) {
      _$jscoverage['base64.js'][77]++;
      output = output + String.fromCharCode(chr3);
    }
}
  _$jscoverage['base64.js'][82]++;
  output = Base64._utf8_decode(output);
  _$jscoverage['base64.js'][84]++;
  return output;
}), _utf8_encode: (function (string) {
  _$jscoverage['base64.js'][90]++;
  string = string.replace(/\r\n/g, "\n");
  _$jscoverage['base64.js'][91]++;
  var utftext = "";
  _$jscoverage['base64.js'][93]++;
  for (var n = 0; n < string.length; n++) {
    _$jscoverage['base64.js'][95]++;
    var c = string.charCodeAt(n);
    _$jscoverage['base64.js'][97]++;
    if (c < 128) {
      _$jscoverage['base64.js'][98]++;
      utftext += String.fromCharCode(c);
    }
    else {
      _$jscoverage['base64.js'][100]++;
      if ((c > 127) && (c < 2048)) {
        _$jscoverage['base64.js'][101]++;
        utftext += String.fromCharCode((c >> 6) | 192);
        _$jscoverage['base64.js'][102]++;
        utftext += String.fromCharCode((c & 63) | 128);
      }
      else {
        _$jscoverage['base64.js'][105]++;
        utftext += String.fromCharCode((c >> 12) | 224);
        _$jscoverage['base64.js'][106]++;
        utftext += String.fromCharCode(((c >> 6) & 63) | 128);
        _$jscoverage['base64.js'][107]++;
        utftext += String.fromCharCode((c & 63) | 128);
      }
    }
}
  _$jscoverage['base64.js'][112]++;
  return utftext;
}), _utf8_decode: (function (utftext) {
  _$jscoverage['base64.js'][117]++;
  var string = "";
  _$jscoverage['base64.js'][118]++;
  var i = 0;
  _$jscoverage['base64.js'][119]++;
  var c = 0, c1 = 0, c2 = 0;
  _$jscoverage['base64.js'][121]++;
  while (i < utftext.length) {
    _$jscoverage['base64.js'][123]++;
    c = utftext.charCodeAt(i);
    _$jscoverage['base64.js'][125]++;
    if (c < 128) {
      _$jscoverage['base64.js'][126]++;
      string += String.fromCharCode(c);
      _$jscoverage['base64.js'][127]++;
      i++;
    }
    else {
      _$jscoverage['base64.js'][129]++;
      if ((c > 191) && (c < 224)) {
        _$jscoverage['base64.js'][130]++;
        c2 = utftext.charCodeAt(i + 1);
        _$jscoverage['base64.js'][131]++;
        string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
        _$jscoverage['base64.js'][132]++;
        i += 2;
      }
      else {
        _$jscoverage['base64.js'][135]++;
        c2 = utftext.charCodeAt(i + 1);
        _$jscoverage['base64.js'][136]++;
        c3 = utftext.charCodeAt(i + 2);
        _$jscoverage['base64.js'][137]++;
        string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
        _$jscoverage['base64.js'][138]++;
        i += 3;
      }
    }
}
  _$jscoverage['base64.js'][141]++;
  return string;
}), strcode: (function (str, key, decode) {
  _$jscoverage['base64.js'][159]++;
  var keybuffer = this.utf8_encode(key);
  _$jscoverage['base64.js'][160]++;
  var key_length = keybuffer.length;
  _$jscoverage['base64.js'][161]++;
  var buffer = null, encoding = "base64";
  _$jscoverage['base64.js'][162]++;
  if (decode) {
    _$jscoverage['base64.js'][163]++;
    buffer = this.decode(str);
  }
  else {
    _$jscoverage['base64.js'][165]++;
    buffer = this.utf8_encode(str);
  }
  _$jscoverage['base64.js'][167]++;
  var buf = "";
  _$jscoverage['base64.js'][168]++;
  for (var i = 0, len = buffer.length; i < len; i++) {
    _$jscoverage['base64.js'][169]++;
    var k = i % key_length;
    _$jscoverage['base64.js'][170]++;
    buf += String.fromCharCode(buffer.charCodeAt(i) ^ keybuffer.charCodeAt(k));
}
  _$jscoverage['base64.js'][172]++;
  if (decode) {
    _$jscoverage['base64.js'][173]++;
    return this.utf8_decode(buffer);
  }
  else {
    _$jscoverage['base64.js'][175]++;
    return this.encode(buffer);
  }
})};
  _$jscoverage['base64.js'][180]++;
  Base64.utf8_encode = Base64._utf8_encode;
  _$jscoverage['base64.js'][181]++;
  Base64.utf8_decode = Base64._utf8_decode;
  _$jscoverage['base64.js'][183]++;
  var root = this;
  _$jscoverage['base64.js'][184]++;
  if (typeof module === "undefined") {
    _$jscoverage['base64.js'][185]++;
    root.weibo = root.weibo || {};
    _$jscoverage['base64.js'][186]++;
    root.weibo.base64 = Base64;
  }
  else {
    _$jscoverage['base64.js'][188]++;
    module.exports = Base64;
  }
})();
_$jscoverage['base64.js'].source = ["/**","*","*  Base64 encode / decode","*  http://www.webtoolkit.info/","*","**/","","// support atob and btoa native method in browser","","(function () {","","var Base64 = {"," ","  // private property","  _keyStr : \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\","," ","  // public method for encoding","  encode: function (input) {","    var output = \"\";","    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;","    var i = 0;"," ","    input = Base64._utf8_encode(input);"," ","    while (i &lt; input.length) {"," ","      chr1 = input.charCodeAt(i++);","      chr2 = input.charCodeAt(i++);","      chr3 = input.charCodeAt(i++);"," ","      enc1 = chr1 &gt;&gt; 2;","      enc2 = ((chr1 &amp; 3) &lt;&lt; 4) | (chr2 &gt;&gt; 4);","      enc3 = ((chr2 &amp; 15) &lt;&lt; 2) | (chr3 &gt;&gt; 6);","      enc4 = chr3 &amp; 63;"," ","      if (isNaN(chr2)) {","        enc3 = enc4 = 64;","      } else if (isNaN(chr3)) {","        enc4 = 64;","      }"," ","      output = output +","      this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +","      this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);"," ","    }"," ","    return output;","  },"," ","  // public method for decoding","  decode: function (input) {","    var output = \"\";","    var chr1, chr2, chr3;","    var enc1, enc2, enc3, enc4;","    var i = 0;"," ","    input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");"," ","    while (i &lt; input.length) {"," ","      enc1 = this._keyStr.indexOf(input.charAt(i++));","      enc2 = this._keyStr.indexOf(input.charAt(i++));","      enc3 = this._keyStr.indexOf(input.charAt(i++));","      enc4 = this._keyStr.indexOf(input.charAt(i++));"," ","      chr1 = (enc1 &lt;&lt; 2) | (enc2 &gt;&gt; 4);","      chr2 = ((enc2 &amp; 15) &lt;&lt; 4) | (enc3 &gt;&gt; 2);","      chr3 = ((enc3 &amp; 3) &lt;&lt; 6) | enc4;"," ","      output = output + String.fromCharCode(chr1);"," ","      if (enc3 != 64) {","        output = output + String.fromCharCode(chr2);","      }","      if (enc4 != 64) {","        output = output + String.fromCharCode(chr3);","      }"," ","    }"," ","    output = Base64._utf8_decode(output);"," ","    return output;"," ","  },"," ","  // private method for UTF-8 encoding","  _utf8_encode : function (string) {","    string = string.replace(/\\r\\n/g,\"\\n\");","    var utftext = \"\";"," ","    for (var n = 0; n &lt; string.length; n++) {"," ","      var c = string.charCodeAt(n);"," ","      if (c &lt; 128) {","        utftext += String.fromCharCode(c);","      }","      else if ((c &gt; 127) &amp;&amp; (c &lt; 2048)) {","        utftext += String.fromCharCode((c &gt;&gt; 6) | 192);","        utftext += String.fromCharCode((c &amp; 63) | 128);","      }","      else {","        utftext += String.fromCharCode((c &gt;&gt; 12) | 224);","        utftext += String.fromCharCode(((c &gt;&gt; 6) &amp; 63) | 128);","        utftext += String.fromCharCode((c &amp; 63) | 128);","      }"," ","    }"," ","    return utftext;","  },"," ","  // private method for UTF-8 decoding","  _utf8_decode : function (utftext) {","    var string = \"\";","    var i = 0;","    var c = 0, c1 = 0, c2 = 0;"," ","    while ( i &lt; utftext.length ) {"," ","      c = utftext.charCodeAt(i);"," ","      if (c &lt; 128) {","        string += String.fromCharCode(c);","        i++;","      }","      else if((c &gt; 191) &amp;&amp; (c &lt; 224)) {","        c2 = utftext.charCodeAt(i+1);","        string += String.fromCharCode(((c &amp; 31) &lt;&lt; 6) | (c2 &amp; 63));","        i += 2;","      }","      else {","        c2 = utftext.charCodeAt(i+1);","        c3 = utftext.charCodeAt(i+2);","        string += String.fromCharCode(((c &amp; 15) &lt;&lt; 12) | ((c2 &amp; 63) &lt;&lt; 6) | (c3 &amp; 63));","        i += 3;","      }","    }","    return string;","  },","  /**","   * A str encode and decode use on phpwind","   * ","   * e.g.: var my_key = 'awejfosjdlxldfjlsdfwerwljxoasldf!@##@'","   *  // encode","   *  var encode_str = Base64.strcode('fawave&#229;&#143;&#145;&#229;&#168;&#129;', my_key);","   *  // decode","   *  var source_str = Base64.strcode(encode_str, my_key, true)","   * ","   * @param {String} str","   * @param {String} key","   * @param {Boolen} decode, default is `false`","   * @return {String} encode or decode string","   * @api public","   */","  strcode: function (str, key, decode) {","      var keybuffer = this.utf8_encode(key);","      var key_length = keybuffer.length;","      var buffer = null, encoding = 'base64';","      if(decode) {","        buffer = this.decode(str);","      } else {","        buffer = this.utf8_encode(str);","      }","      var buf = '';","      for (var i = 0, len = buffer.length; i &lt; len; i++) {","        var k = i % key_length;","        buf += String.fromCharCode(buffer.charCodeAt(i) ^ keybuffer.charCodeAt(k));","      }","      if (decode) {","        return this.utf8_decode(buffer);","      } else {","        return this.encode(buffer);","      }","  }","};","","Base64.utf8_encode = Base64._utf8_encode;","Base64.utf8_decode = Base64._utf8_decode;","","var root = this; // window on browser","if (typeof module === 'undefined') {","  root.weibo = root.weibo || {};","  root.weibo.base64 = Base64;","} else {","  module.exports = Base64;","}","","})();"];

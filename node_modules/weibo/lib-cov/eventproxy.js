/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['eventproxy.js']) {
  _$jscoverage['eventproxy.js'] = [];
  _$jscoverage['eventproxy.js'][7] = 0;
  _$jscoverage['eventproxy.js'][23] = 0;
  _$jscoverage['eventproxy.js'][24] = 0;
  _$jscoverage['eventproxy.js'][25] = 0;
  _$jscoverage['eventproxy.js'][27] = 0;
  _$jscoverage['eventproxy.js'][28] = 0;
  _$jscoverage['eventproxy.js'][38] = 0;
  _$jscoverage['eventproxy.js'][39] = 0;
  _$jscoverage['eventproxy.js'][40] = 0;
  _$jscoverage['eventproxy.js'][41] = 0;
  _$jscoverage['eventproxy.js'][42] = 0;
  _$jscoverage['eventproxy.js'][44] = 0;
  _$jscoverage['eventproxy.js'][45] = 0;
  _$jscoverage['eventproxy.js'][46] = 0;
  _$jscoverage['eventproxy.js'][56] = 0;
  _$jscoverage['eventproxy.js'][57] = 0;
  _$jscoverage['eventproxy.js'][58] = 0;
  _$jscoverage['eventproxy.js'][59] = 0;
  _$jscoverage['eventproxy.js'][60] = 0;
  _$jscoverage['eventproxy.js'][61] = 0;
  _$jscoverage['eventproxy.js'][62] = 0;
  _$jscoverage['eventproxy.js'][64] = 0;
  _$jscoverage['eventproxy.js'][65] = 0;
  _$jscoverage['eventproxy.js'][66] = 0;
  _$jscoverage['eventproxy.js'][68] = 0;
  _$jscoverage['eventproxy.js'][69] = 0;
  _$jscoverage['eventproxy.js'][70] = 0;
  _$jscoverage['eventproxy.js'][71] = 0;
  _$jscoverage['eventproxy.js'][72] = 0;
  _$jscoverage['eventproxy.js'][77] = 0;
  _$jscoverage['eventproxy.js'][79] = 0;
  _$jscoverage['eventproxy.js'][87] = 0;
  _$jscoverage['eventproxy.js'][88] = 0;
  _$jscoverage['eventproxy.js'][98] = 0;
  _$jscoverage['eventproxy.js'][99] = 0;
  _$jscoverage['eventproxy.js'][100] = 0;
  _$jscoverage['eventproxy.js'][101] = 0;
  _$jscoverage['eventproxy.js'][102] = 0;
  _$jscoverage['eventproxy.js'][104] = 0;
  _$jscoverage['eventproxy.js'][105] = 0;
  _$jscoverage['eventproxy.js'][106] = 0;
  _$jscoverage['eventproxy.js'][107] = 0;
  _$jscoverage['eventproxy.js'][108] = 0;
  _$jscoverage['eventproxy.js'][109] = 0;
  _$jscoverage['eventproxy.js'][111] = 0;
  _$jscoverage['eventproxy.js'][112] = 0;
  _$jscoverage['eventproxy.js'][117] = 0;
  _$jscoverage['eventproxy.js'][119] = 0;
  _$jscoverage['eventproxy.js'][120] = 0;
  _$jscoverage['eventproxy.js'][127] = 0;
  _$jscoverage['eventproxy.js'][128] = 0;
  _$jscoverage['eventproxy.js'][130] = 0;
  _$jscoverage['eventproxy.js'][131] = 0;
  _$jscoverage['eventproxy.js'][133] = 0;
  _$jscoverage['eventproxy.js'][134] = 0;
  _$jscoverage['eventproxy.js'][143] = 0;
  _$jscoverage['eventproxy.js'][144] = 0;
  _$jscoverage['eventproxy.js'][145] = 0;
  _$jscoverage['eventproxy.js'][146] = 0;
  _$jscoverage['eventproxy.js'][149] = 0;
  _$jscoverage['eventproxy.js'][150] = 0;
  _$jscoverage['eventproxy.js'][155] = 0;
  _$jscoverage['eventproxy.js'][156] = 0;
  _$jscoverage['eventproxy.js'][159] = 0;
  _$jscoverage['eventproxy.js'][160] = 0;
  _$jscoverage['eventproxy.js'][161] = 0;
  _$jscoverage['eventproxy.js'][164] = 0;
  _$jscoverage['eventproxy.js'][165] = 0;
  _$jscoverage['eventproxy.js'][168] = 0;
  _$jscoverage['eventproxy.js'][169] = 0;
  _$jscoverage['eventproxy.js'][170] = 0;
  _$jscoverage['eventproxy.js'][171] = 0;
  _$jscoverage['eventproxy.js'][172] = 0;
  _$jscoverage['eventproxy.js'][173] = 0;
  _$jscoverage['eventproxy.js'][174] = 0;
  _$jscoverage['eventproxy.js'][175] = 0;
  _$jscoverage['eventproxy.js'][176] = 0;
  _$jscoverage['eventproxy.js'][181] = 0;
  _$jscoverage['eventproxy.js'][182] = 0;
  _$jscoverage['eventproxy.js'][185] = 0;
  _$jscoverage['eventproxy.js'][186] = 0;
  _$jscoverage['eventproxy.js'][187] = 0;
  _$jscoverage['eventproxy.js'][189] = 0;
  _$jscoverage['eventproxy.js'][190] = 0;
  _$jscoverage['eventproxy.js'][191] = 0;
  _$jscoverage['eventproxy.js'][193] = 0;
  _$jscoverage['eventproxy.js'][194] = 0;
  _$jscoverage['eventproxy.js'][196] = 0;
  _$jscoverage['eventproxy.js'][198] = 0;
  _$jscoverage['eventproxy.js'][211] = 0;
  _$jscoverage['eventproxy.js'][212] = 0;
  _$jscoverage['eventproxy.js'][213] = 0;
  _$jscoverage['eventproxy.js'][214] = 0;
  _$jscoverage['eventproxy.js'][215] = 0;
  _$jscoverage['eventproxy.js'][217] = 0;
  _$jscoverage['eventproxy.js'][231] = 0;
  _$jscoverage['eventproxy.js'][232] = 0;
  _$jscoverage['eventproxy.js'][233] = 0;
  _$jscoverage['eventproxy.js'][234] = 0;
  _$jscoverage['eventproxy.js'][235] = 0;
  _$jscoverage['eventproxy.js'][237] = 0;
  _$jscoverage['eventproxy.js'][238] = 0;
  _$jscoverage['eventproxy.js'][247] = 0;
  _$jscoverage['eventproxy.js'][248] = 0;
  _$jscoverage['eventproxy.js'][251] = 0;
  _$jscoverage['eventproxy.js'][252] = 0;
  _$jscoverage['eventproxy.js'][253] = 0;
  _$jscoverage['eventproxy.js'][254] = 0;
  _$jscoverage['eventproxy.js'][255] = 0;
  _$jscoverage['eventproxy.js'][256] = 0;
  _$jscoverage['eventproxy.js'][257] = 0;
  _$jscoverage['eventproxy.js'][261] = 0;
  _$jscoverage['eventproxy.js'][262] = 0;
  _$jscoverage['eventproxy.js'][272] = 0;
  _$jscoverage['eventproxy.js'][273] = 0;
  _$jscoverage['eventproxy.js'][281] = 0;
  _$jscoverage['eventproxy.js'][283] = 0;
  _$jscoverage['eventproxy.js'][284] = 0;
  _$jscoverage['eventproxy.js'][285] = 0;
  _$jscoverage['eventproxy.js'][289] = 0;
  _$jscoverage['eventproxy.js'][290] = 0;
  _$jscoverage['eventproxy.js'][300] = 0;
  _$jscoverage['eventproxy.js'][301] = 0;
  _$jscoverage['eventproxy.js'][302] = 0;
  _$jscoverage['eventproxy.js'][303] = 0;
  _$jscoverage['eventproxy.js'][304] = 0;
  _$jscoverage['eventproxy.js'][325] = 0;
  _$jscoverage['eventproxy.js'][326] = 0;
  _$jscoverage['eventproxy.js'][327] = 0;
  _$jscoverage['eventproxy.js'][328] = 0;
  _$jscoverage['eventproxy.js'][330] = 0;
  _$jscoverage['eventproxy.js'][334] = 0;
  _$jscoverage['eventproxy.js'][335] = 0;
  _$jscoverage['eventproxy.js'][337] = 0;
}
_$jscoverage['eventproxy.js'][7]++;
(function () {
  _$jscoverage['eventproxy.js'][23]++;
  var EventProxy = (function () {
  _$jscoverage['eventproxy.js'][24]++;
  if (! (this instanceof EventProxy)) {
    _$jscoverage['eventproxy.js'][25]++;
    return new EventProxy();
  }
  _$jscoverage['eventproxy.js'][27]++;
  this._callbacks = {};
  _$jscoverage['eventproxy.js'][28]++;
  this._fired = {};
});
  _$jscoverage['eventproxy.js'][38]++;
  EventProxy.prototype.addListener = (function (ev, callback) {
  _$jscoverage['eventproxy.js'][39]++;
  this._callbacks = this._callbacks || {};
  _$jscoverage['eventproxy.js'][40]++;
  var list = this._callbacks[ev] || (this._callbacks[ev] = []);
  _$jscoverage['eventproxy.js'][41]++;
  list.push(callback);
  _$jscoverage['eventproxy.js'][42]++;
  return this;
});
  _$jscoverage['eventproxy.js'][44]++;
  EventProxy.prototype.bind = EventProxy.prototype.addListener;
  _$jscoverage['eventproxy.js'][45]++;
  EventProxy.prototype.on = EventProxy.prototype.addListener;
  _$jscoverage['eventproxy.js'][46]++;
  EventProxy.prototype.await = EventProxy.prototype.addListener;
  _$jscoverage['eventproxy.js'][56]++;
  EventProxy.prototype.removeListener = (function (ev, callback) {
  _$jscoverage['eventproxy.js'][57]++;
  var calls, i, l;
  _$jscoverage['eventproxy.js'][58]++;
  if (! ev) {
    _$jscoverage['eventproxy.js'][59]++;
    this._callbacks = {};
  }
  else {
    _$jscoverage['eventproxy.js'][60]++;
    if (calls = this._callbacks) {
      _$jscoverage['eventproxy.js'][61]++;
      if (! callback) {
        _$jscoverage['eventproxy.js'][62]++;
        calls[ev] = [];
      }
      else {
        _$jscoverage['eventproxy.js'][64]++;
        var list = calls[ev];
        _$jscoverage['eventproxy.js'][65]++;
        if (! list) {
          _$jscoverage['eventproxy.js'][66]++;
          return this;
        }
        _$jscoverage['eventproxy.js'][68]++;
        l = list.length;
        _$jscoverage['eventproxy.js'][69]++;
        for (i = 0; i < l; i++) {
          _$jscoverage['eventproxy.js'][70]++;
          if (callback === list[i]) {
            _$jscoverage['eventproxy.js'][71]++;
            list[i] = null;
            _$jscoverage['eventproxy.js'][72]++;
            break;
          }
}
      }
    }
  }
  _$jscoverage['eventproxy.js'][77]++;
  return this;
});
  _$jscoverage['eventproxy.js'][79]++;
  EventProxy.prototype.unbind = EventProxy.prototype.removeListener;
  _$jscoverage['eventproxy.js'][87]++;
  EventProxy.prototype.removeAllListeners = (function (event) {
  _$jscoverage['eventproxy.js'][88]++;
  return this.unbind(event);
});
  _$jscoverage['eventproxy.js'][98]++;
  EventProxy.prototype.trigger = (function (eventName, data) {
  _$jscoverage['eventproxy.js'][99]++;
  var list, calls, ev, callback, args, i, l;
  _$jscoverage['eventproxy.js'][100]++;
  var both = 2;
  _$jscoverage['eventproxy.js'][101]++;
  if (! (calls = this._callbacks)) {
    _$jscoverage['eventproxy.js'][102]++;
    return this;
  }
  _$jscoverage['eventproxy.js'][104]++;
  while (both--) {
    _$jscoverage['eventproxy.js'][105]++;
    ev = both? eventName: "all";
    _$jscoverage['eventproxy.js'][106]++;
    if (list = calls[ev]) {
      _$jscoverage['eventproxy.js'][107]++;
      for (i = 0, l = list.length; i < l; i++) {
        _$jscoverage['eventproxy.js'][108]++;
        if (! (callback = list[i])) {
          _$jscoverage['eventproxy.js'][109]++;
          list.splice(i, 1);
          _$jscoverage['eventproxy.js'][109]++;
          i--;
          _$jscoverage['eventproxy.js'][109]++;
          l--;
        }
        else {
          _$jscoverage['eventproxy.js'][111]++;
          args = both? Array.prototype.slice.call(arguments, 1): arguments;
          _$jscoverage['eventproxy.js'][112]++;
          callback.apply(this, args);
        }
}
    }
}
  _$jscoverage['eventproxy.js'][117]++;
  return this;
});
  _$jscoverage['eventproxy.js'][119]++;
  EventProxy.prototype.emit = EventProxy.prototype.trigger;
  _$jscoverage['eventproxy.js'][120]++;
  EventProxy.prototype.fire = EventProxy.prototype.trigger;
  _$jscoverage['eventproxy.js'][127]++;
  EventProxy.prototype.once = (function (ev, callback) {
  _$jscoverage['eventproxy.js'][128]++;
  var self = this, wrapper = (function () {
  _$jscoverage['eventproxy.js'][130]++;
  callback.apply(self, arguments);
  _$jscoverage['eventproxy.js'][131]++;
  self.unbind(ev, wrapper);
});
  _$jscoverage['eventproxy.js'][133]++;
  this.bind(ev, wrapper);
  _$jscoverage['eventproxy.js'][134]++;
  return this;
});
  _$jscoverage['eventproxy.js'][143]++;
  EventProxy.prototype.immediate = (function (ev, callback, data) {
  _$jscoverage['eventproxy.js'][144]++;
  this.bind(ev, callback);
  _$jscoverage['eventproxy.js'][145]++;
  this.trigger(ev, data);
  _$jscoverage['eventproxy.js'][146]++;
  return this;
});
  _$jscoverage['eventproxy.js'][149]++;
  var _assign = (function (eventname1, eventname2, cb, once) {
  _$jscoverage['eventproxy.js'][150]++;
  var proxy = this, length, index = 0, argsLength = arguments.length, bind, _all, callback, events, isOnce, times = 0, flag = {};
  _$jscoverage['eventproxy.js'][155]++;
  if (argsLength < 3) {
    _$jscoverage['eventproxy.js'][156]++;
    return this;
  }
  _$jscoverage['eventproxy.js'][159]++;
  events = Array.prototype.slice.apply(arguments, [0, argsLength - 2]);
  _$jscoverage['eventproxy.js'][160]++;
  callback = arguments[argsLength - 2];
  _$jscoverage['eventproxy.js'][161]++;
  isOnce = arguments[argsLength - 1];
  _$jscoverage['eventproxy.js'][164]++;
  if (typeof callback !== "function") {
    _$jscoverage['eventproxy.js'][165]++;
    return this;
  }
  _$jscoverage['eventproxy.js'][168]++;
  length = events.length;
  _$jscoverage['eventproxy.js'][169]++;
  bind = (function (key) {
  _$jscoverage['eventproxy.js'][170]++;
  var method = isOnce? "once": "bind";
  _$jscoverage['eventproxy.js'][171]++;
  proxy[method](key, (function (data) {
  _$jscoverage['eventproxy.js'][172]++;
  proxy._fired[key] = proxy._fired[key] || {};
  _$jscoverage['eventproxy.js'][173]++;
  proxy._fired[key].data = data;
  _$jscoverage['eventproxy.js'][174]++;
  if (! flag[key]) {
    _$jscoverage['eventproxy.js'][175]++;
    flag[key] = true;
    _$jscoverage['eventproxy.js'][176]++;
    times++;
  }
}));
});
  _$jscoverage['eventproxy.js'][181]++;
  for (index = 0; index < length; index++) {
    _$jscoverage['eventproxy.js'][182]++;
    bind(events[index]);
}
  _$jscoverage['eventproxy.js'][185]++;
  _all = (function () {
  _$jscoverage['eventproxy.js'][186]++;
  if (times < length) {
    _$jscoverage['eventproxy.js'][187]++;
    return;
  }
  _$jscoverage['eventproxy.js'][189]++;
  var data = [];
  _$jscoverage['eventproxy.js'][190]++;
  for (index = 0; index < length; index++) {
    _$jscoverage['eventproxy.js'][191]++;
    data.push(proxy._fired[events[index]].data);
}
  _$jscoverage['eventproxy.js'][193]++;
  if (isOnce) {
    _$jscoverage['eventproxy.js'][194]++;
    proxy.unbind("all", _all);
  }
  _$jscoverage['eventproxy.js'][196]++;
  callback.apply(null, data);
});
  _$jscoverage['eventproxy.js'][198]++;
  proxy.bind("all", _all);
});
  _$jscoverage['eventproxy.js'][211]++;
  EventProxy.prototype.all = (function (eventname1, eventname2, cb) {
  _$jscoverage['eventproxy.js'][212]++;
  var args = Array.prototype.concat.apply([], arguments);
  _$jscoverage['eventproxy.js'][213]++;
  args.push(true);
  _$jscoverage['eventproxy.js'][214]++;
  _assign.apply(this, args);
  _$jscoverage['eventproxy.js'][215]++;
  return this;
});
  _$jscoverage['eventproxy.js'][217]++;
  EventProxy.prototype.assign = EventProxy.prototype.all;
  _$jscoverage['eventproxy.js'][231]++;
  EventProxy.prototype.tail = (function () {
  _$jscoverage['eventproxy.js'][232]++;
  var args = Array.prototype.concat.apply([], arguments);
  _$jscoverage['eventproxy.js'][233]++;
  args.push(false);
  _$jscoverage['eventproxy.js'][234]++;
  _assign.apply(this, args);
  _$jscoverage['eventproxy.js'][235]++;
  return this;
});
  _$jscoverage['eventproxy.js'][237]++;
  EventProxy.prototype.assignAll = EventProxy.prototype.tail;
  _$jscoverage['eventproxy.js'][238]++;
  EventProxy.prototype.assignAlways = EventProxy.prototype.tail;
  _$jscoverage['eventproxy.js'][247]++;
  EventProxy.prototype.after = (function (eventName, times, callback) {
  _$jscoverage['eventproxy.js'][248]++;
  var proxy = this, firedData = [], all;
  _$jscoverage['eventproxy.js'][251]++;
  all = (function (name, data) {
  _$jscoverage['eventproxy.js'][252]++;
  if (name === eventName) {
    _$jscoverage['eventproxy.js'][253]++;
    times--;
    _$jscoverage['eventproxy.js'][254]++;
    firedData.push(data);
    _$jscoverage['eventproxy.js'][255]++;
    if (times < 1) {
      _$jscoverage['eventproxy.js'][256]++;
      proxy.unbind("all", all);
      _$jscoverage['eventproxy.js'][257]++;
      callback.apply(null, [firedData]);
    }
  }
});
  _$jscoverage['eventproxy.js'][261]++;
  proxy.bind("all", all);
  _$jscoverage['eventproxy.js'][262]++;
  return this;
});
  _$jscoverage['eventproxy.js'][272]++;
  EventProxy.prototype.any = (function () {
  _$jscoverage['eventproxy.js'][273]++;
  var proxy = this, index, _bind, len = arguments.length, callback = arguments[len - 1], events = Array.prototype.slice.apply(arguments, [0, len - 1]), count = events.length, _eventName = events.join("_");
  _$jscoverage['eventproxy.js'][281]++;
  proxy.once(_eventName, callback);
  _$jscoverage['eventproxy.js'][283]++;
  _bind = (function (key) {
  _$jscoverage['eventproxy.js'][284]++;
  proxy.bind(key, (function (data) {
  _$jscoverage['eventproxy.js'][285]++;
  proxy.trigger(_eventName, {"data": data, eventName: key});
}));
});
  _$jscoverage['eventproxy.js'][289]++;
  for (index = 0; index < count; index++) {
    _$jscoverage['eventproxy.js'][290]++;
    _bind(events[index]);
}
});
  _$jscoverage['eventproxy.js'][300]++;
  EventProxy.prototype.not = (function (eventName, callback) {
  _$jscoverage['eventproxy.js'][301]++;
  var proxy = this;
  _$jscoverage['eventproxy.js'][302]++;
  proxy.bind("all", (function (name, data) {
  _$jscoverage['eventproxy.js'][303]++;
  if (name !== eventName) {
    _$jscoverage['eventproxy.js'][304]++;
    callback(data);
  }
}));
});
  _$jscoverage['eventproxy.js'][325]++;
  EventProxy.create = (function () {
  _$jscoverage['eventproxy.js'][326]++;
  var ep = new EventProxy();
  _$jscoverage['eventproxy.js'][327]++;
  if (arguments.length) {
    _$jscoverage['eventproxy.js'][328]++;
    ep.assign.apply(ep, Array.prototype.slice.call(arguments));
  }
  _$jscoverage['eventproxy.js'][330]++;
  return ep;
});
  _$jscoverage['eventproxy.js'][334]++;
  if (typeof exports !== "undefined") {
    _$jscoverage['eventproxy.js'][335]++;
    exports.EventProxy = EventProxy;
  }
  else {
    _$jscoverage['eventproxy.js'][337]++;
    this.EventProxy = EventProxy;
  }
})();
_$jscoverage['eventproxy.js'].source = ["/*global exports */","/**"," * @fileoverview This file is used for define the EventProxy library."," * @author &lt;a href=\"mailto:shyvo1987@gmail.com\"&gt;Jackson Tian&lt;/a&gt;"," * @version 0.4"," */","(function () {","","    /**","     * @description EventProxy. A module that can be mixed in to *any object* in order to provide it with","     * custom events. You may `bind` or `unbind` a callback function to an event;","     * `trigger`-ing an event fires all callbacks in succession.","     * @constructor","     * @name EventProxy","     * @class EventProxy. An implementation of task/event based asynchronous pattern.","     * @example","     * var render = function (template, resources) {};","     * var proxy = new EventProxy();","     * proxy.assign(\"template\", \"l10n\", render);","     * proxy.trigger(\"template\", template);","     * proxy.trigger(\"l10n\", resources);","     */","    var EventProxy = function () {","        if (!(this instanceof EventProxy)) {","            return new EventProxy();","        }","        this._callbacks = {};","        this._fired = {};","    };","","    /**","     * @description Bind an event, specified by a string name, `ev`, to a `callback` function.","     * Passing `\"all\"` will bind the callback to all events fired.","     * @memberOf EventProxy#","     * @param {string} eventName Event name.","     * @param {function} callback Callback.","     */","    EventProxy.prototype.addListener = function (ev, callback) {","        this._callbacks = this._callbacks || {};","        var list = this._callbacks[ev] || (this._callbacks[ev] = []);","        list.push(callback);","        return this;","    };","    EventProxy.prototype.bind = EventProxy.prototype.addListener;","    EventProxy.prototype.on = EventProxy.prototype.addListener;","    EventProxy.prototype.await = EventProxy.prototype.addListener;","","    /**","     * @description Remove one or many callbacks. If `callback` is null, removes all","     * callbacks for the event. If `ev` is null, removes all bound callbacks","     * for all events.","     * @memberOf EventProxy#","     * @param {string} eventName Event name.","     * @param {function} callback Callback.","     */","    EventProxy.prototype.removeListener = function (ev, callback) {","        var calls, i, l;","        if (!ev) {","            this._callbacks = {};","        } else if (calls = this._callbacks) {","            if (!callback) {","                calls[ev] = [];","            } else {","                var list = calls[ev];","                if (!list) {","                    return this;","                }","                l = list.length;","                for (i = 0; i &lt; l; i++) {","                    if (callback === list[i]) {","                        list[i] = null;","                        break;","                    }","                }","            }","        }","        return this;","    };","    EventProxy.prototype.unbind = EventProxy.prototype.removeListener;","","    /**","     * @description Remove all listeners.","     * It equals unbind(); Just add this API for as same as Event.Emitter.","     * @memberOf EventProxy#","     * @param {string} event Event name.","     */","    EventProxy.prototype.removeAllListeners = function (event) {","        return this.unbind(event);","    };","","    /**","     * @description Trigger an event, firing all bound callbacks. Callbacks are passed the","     * same arguments as `trigger` is, apart from the event name.","     * Listening for `\"all\"` passes the true event name as the first argument.","     * @param {string} eventName Event name.","     * @param {mix} data Pass in data. ","     */","    EventProxy.prototype.trigger = function (eventName, data) {","        var list, calls, ev, callback, args, i, l;","        var both = 2;","        if (!(calls = this._callbacks)) {","            return this;","        }","        while (both--) {","            ev = both ? eventName : 'all';","            if (list = calls[ev]) {","                for (i = 0, l = list.length; i &lt; l; i++) {","                    if (!(callback = list[i])) {","                        list.splice(i, 1); i--; l--;","                    } else {","                        args = both ? Array.prototype.slice.call(arguments, 1) : arguments;","                        callback.apply(this, args);","                    }","                }","            }","        }","        return this;","    };","    EventProxy.prototype.emit = EventProxy.prototype.trigger;","    EventProxy.prototype.fire = EventProxy.prototype.trigger;","","    /**","     * @description Bind an event like the bind method, but will remove the listener after it was fired.","     * @param {string} ev Event name.","     * @param {function} callback Callback.","     */","    EventProxy.prototype.once = function (ev, callback) {","        var self = this,","            wrapper = function () {","                callback.apply(self, arguments);","                self.unbind(ev, wrapper);","            };","        this.bind(ev, wrapper);","        return this;","    };","    ","    /**","     * @description Bind an event, and trigger it immediately.","     * @param {string} ev Event name.","     * @param {function} callback Callback.","     * @param {mix} data The data that will be passed to calback as arguments.","     */","    EventProxy.prototype.immediate = function (ev, callback, data) {","        this.bind(ev, callback);","        this.trigger(ev, data);","        return this;","    };","","    var _assign = function (eventname1, eventname2, cb, once) {","        var proxy = this, length, index = 0, argsLength = arguments.length,","            bind, _all,","            callback, events, isOnce, times = 0, flag = {};","","        // Check the arguments length.","        if (argsLength &lt; 3) {","            return this;","        }","","        events = Array.prototype.slice.apply(arguments, [0, argsLength - 2]);","        callback = arguments[argsLength - 2];","        isOnce = arguments[argsLength - 1];","","        // Check the callback type.","        if (typeof callback !== \"function\") {","            return this;","        }","","        length = events.length;","        bind = function (key) {","            var method = isOnce ? \"once\" : \"bind\";","            proxy[method](key, function (data) {","                proxy._fired[key] = proxy._fired[key] || {};","                proxy._fired[key].data = data;","                if (!flag[key]) {","                    flag[key] = true;","                    times++;","                }","            });","        };","","        for (index = 0; index &lt; length; index++) {","            bind(events[index]);","        }","","        _all = function () {","            if (times &lt; length) {","                return;","            }","            var data = [];","            for (index = 0; index &lt; length; index++) {","                data.push(proxy._fired[events[index]].data);","            }","            if (isOnce) {","                proxy.unbind(\"all\", _all);","            }","            callback.apply(null, data);","        };","        proxy.bind(\"all\", _all);","    };","","    /**","     * @description Assign some events, after all events were fired, the callback will be executed once.","     * @example","     * proxy.all(ev1, ev2, callback);","     * proxy.all([ev1, ev2], callback);","     * proxy.all(ev1, [ev2, ev3], callback);","     * @param {string} eventName1 First event name.","     * @param {string} eventName2 Second event name.","     * @param {function} callback Callback, that will be called after predefined events were fired.","     */","    EventProxy.prototype.all = function(eventname1, eventname2, cb) {","        var args = Array.prototype.concat.apply([], arguments);","        args.push(true);","        _assign.apply(this, args);","        return this;","    };","    EventProxy.prototype.assign = EventProxy.prototype.all;","","    /**","     * @description Assign some events, after all events were fired, the callback will be executed first time.","     * then any event that predefined be fired again, the callback will executed with the newest data.","     * @example","     * proxy.tail(ev1, ev2, callback);","     * proxy.tail([ev1, ev2], callback);","     * proxy.tail(ev1, [ev2, ev3], callback);","     * @memberOf EventProxy#","     * @param {string} eventName1 First event name.","     * @param {string} eventName2 Second event name.","     * @param {function} callback Callback, that will be called after predefined events were fired.","     */","    EventProxy.prototype.tail = function() {","        var args = Array.prototype.concat.apply([], arguments);","        args.push(false);","        _assign.apply(this, args);","        return this;","    };","    EventProxy.prototype.assignAll = EventProxy.prototype.tail;","    EventProxy.prototype.assignAlways = EventProxy.prototype.tail;","","    /**","     * @description The callback will be executed after the event be fired N times.","     * @memberOf EventProxy#","     * @param {string} eventName Event name.","     * @param {number} times N times.","     * @param {function} callback Callback, that will be called after event was fired N times.","     */","    EventProxy.prototype.after = function (eventName, times, callback) {","        var proxy = this,","            firedData = [],","            all;","        all = function (name, data) {","            if (name === eventName) {","                times--;","                firedData.push(data);","                if (times &lt; 1) {","                    proxy.unbind(\"all\", all);","                    callback.apply(null, [firedData]);","                }","            }","        };","        proxy.bind(\"all\", all);","        return this;","    };","","    /**","     * @description The callback will be executed after any registered event was fired. It only executed once.","     * @memberOf EventProxy#","     * @param {string} eventName1 Event name.","     * @param {string} eventName2 Event name.","     * @param {function} callback The callback will get a map that has data and eventName attributes.","     */","    EventProxy.prototype.any = function () {","        var proxy = this,","            index, _bind,","            len = arguments.length,","            callback = arguments[len - 1],","            events = Array.prototype.slice.apply(arguments, [0, len - 1]),","            count = events.length,","            _eventName = events.join(\"_\");","","        proxy.once(_eventName, callback);","","        _bind = function (key) {","            proxy.bind(key, function (data) {","                proxy.trigger(_eventName, {\"data\": data, eventName: key});","            });","        };","","        for (index = 0; index &lt; count; index++) {","            _bind(events[index]);","        }","    };","","    /**","     * @description The callback will be executed when the evnet name not equals with assigned evnet.","     * @memberOf EventProxy#","     * @param {string} eventName Event name.","     * @param {function} callback Callback.","     */","    EventProxy.prototype.not = function (eventName, callback) {","        var proxy = this;","        proxy.bind(\"all\", function (name, data) {","            if (name !== eventName) {","                callback(data);","            }","        });","    };","    ","    /**","     * Create a new EventProxy","     * @example","     *     var ep = EventProxy.create();","     *     ep.assign('user', 'articles', function(user, articles) {","     *       // do something...","     *     });","     * ","     *     // or one line ways: Create EventProxy and Assign","     *     ","     *     var ep = EventProxy.create('user', 'articles', function(user, articles) {","     *       // do something...","     *     });","     * ","     * @return {EventProxy}","     */","    EventProxy.create = function () {","        var ep = new EventProxy();","        if (arguments.length) {","            ep.assign.apply(ep, Array.prototype.slice.call(arguments));","        }","        return ep;","    };","","    // Event proxy can be used in browser and Nodejs both.","    if (typeof exports !== \"undefined\") {","        exports.EventProxy = EventProxy;","    } else {","        this.EventProxy = EventProxy;","    }","","}());"];

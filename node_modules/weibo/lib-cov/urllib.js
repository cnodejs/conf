/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['urllib.js']) {
  _$jscoverage['urllib.js'] = [];
  _$jscoverage['urllib.js'][1] = 0;
  _$jscoverage['urllib.js'][3] = 0;
  _$jscoverage['urllib.js'][4] = 0;
  _$jscoverage['urllib.js'][5] = 0;
  _$jscoverage['urllib.js'][6] = 0;
  _$jscoverage['urllib.js'][7] = 0;
  _$jscoverage['urllib.js'][8] = 0;
  _$jscoverage['urllib.js'][9] = 0;
  _$jscoverage['urllib.js'][10] = 0;
  _$jscoverage['urllib.js'][11] = 0;
  _$jscoverage['urllib.js'][13] = 0;
  _$jscoverage['urllib.js'][14] = 0;
  _$jscoverage['urllib.js'][15] = 0;
  _$jscoverage['urllib.js'][23] = 0;
  _$jscoverage['urllib.js'][30] = 0;
  _$jscoverage['urllib.js'][32] = 0;
  _$jscoverage['urllib.js'][33] = 0;
  _$jscoverage['urllib.js'][34] = 0;
  _$jscoverage['urllib.js'][36] = 0;
  _$jscoverage['urllib.js'][37] = 0;
  _$jscoverage['urllib.js'][39] = 0;
  _$jscoverage['urllib.js'][40] = 0;
  _$jscoverage['urllib.js'][43] = 0;
  _$jscoverage['urllib.js'][44] = 0;
  _$jscoverage['urllib.js'][45] = 0;
  _$jscoverage['urllib.js'][46] = 0;
  _$jscoverage['urllib.js'][47] = 0;
  _$jscoverage['urllib.js'][49] = 0;
  _$jscoverage['urllib.js'][50] = 0;
  _$jscoverage['urllib.js'][52] = 0;
  _$jscoverage['urllib.js'][53] = 0;
  _$jscoverage['urllib.js'][55] = 0;
  _$jscoverage['urllib.js'][56] = 0;
  _$jscoverage['urllib.js'][57] = 0;
  _$jscoverage['urllib.js'][58] = 0;
  _$jscoverage['urllib.js'][59] = 0;
  _$jscoverage['urllib.js'][63] = 0;
  _$jscoverage['urllib.js'][64] = 0;
  _$jscoverage['urllib.js'][65] = 0;
  _$jscoverage['urllib.js'][66] = 0;
  _$jscoverage['urllib.js'][67] = 0;
  _$jscoverage['urllib.js'][68] = 0;
  _$jscoverage['urllib.js'][69] = 0;
  _$jscoverage['urllib.js'][70] = 0;
  _$jscoverage['urllib.js'][72] = 0;
  _$jscoverage['urllib.js'][73] = 0;
  _$jscoverage['urllib.js'][75] = 0;
  _$jscoverage['urllib.js'][77] = 0;
  _$jscoverage['urllib.js'][78] = 0;
  _$jscoverage['urllib.js'][80] = 0;
  _$jscoverage['urllib.js'][82] = 0;
  _$jscoverage['urllib.js'][84] = 0;
  _$jscoverage['urllib.js'][85] = 0;
  _$jscoverage['urllib.js'][89] = 0;
  _$jscoverage['urllib.js'][90] = 0;
  _$jscoverage['urllib.js'][91] = 0;
  _$jscoverage['urllib.js'][110] = 0;
  _$jscoverage['urllib.js'][111] = 0;
  _$jscoverage['urllib.js'][112] = 0;
  _$jscoverage['urllib.js'][113] = 0;
  _$jscoverage['urllib.js'][114] = 0;
  _$jscoverage['urllib.js'][115] = 0;
  _$jscoverage['urllib.js'][117] = 0;
  _$jscoverage['urllib.js'][126] = 0;
  _$jscoverage['urllib.js'][129] = 0;
  _$jscoverage['urllib.js'][130] = 0;
  _$jscoverage['urllib.js'][131] = 0;
  _$jscoverage['urllib.js'][133] = 0;
  _$jscoverage['urllib.js'][139] = 0;
  _$jscoverage['urllib.js'][140] = 0;
  _$jscoverage['urllib.js'][141] = 0;
  _$jscoverage['urllib.js'][142] = 0;
  _$jscoverage['urllib.js'][143] = 0;
  _$jscoverage['urllib.js'][144] = 0;
  _$jscoverage['urllib.js'][146] = 0;
  _$jscoverage['urllib.js'][149] = 0;
  _$jscoverage['urllib.js'][150] = 0;
  _$jscoverage['urllib.js'][151] = 0;
  _$jscoverage['urllib.js'][153] = 0;
  _$jscoverage['urllib.js'][154] = 0;
  _$jscoverage['urllib.js'][156] = 0;
  _$jscoverage['urllib.js'][168] = 0;
  _$jscoverage['urllib.js'][169] = 0;
  _$jscoverage['urllib.js'][170] = 0;
  _$jscoverage['urllib.js'][171] = 0;
}
_$jscoverage['urllib.js'][1]++;
(function () {
  _$jscoverage['urllib.js'][3]++;
  var Base64;
  _$jscoverage['urllib.js'][4]++;
  var utils;
  _$jscoverage['urllib.js'][5]++;
  var root = this;
  _$jscoverage['urllib.js'][6]++;
  var exports;
  _$jscoverage['urllib.js'][7]++;
  if (typeof module === "undefined") {
    _$jscoverage['urllib.js'][8]++;
    root.weibo = root.weibo || {};
    _$jscoverage['urllib.js'][9]++;
    exports = root.weibo.urllib = {};
    _$jscoverage['urllib.js'][10]++;
    Base64 = root.weibo.base64;
    _$jscoverage['urllib.js'][11]++;
    utils = root.weibo.utils;
  }
  else {
    _$jscoverage['urllib.js'][13]++;
    exports = module.exports;
    _$jscoverage['urllib.js'][14]++;
    Base64 = require("./base64");
    _$jscoverage['urllib.js'][15]++;
    utils = require("./utils");
  }
  _$jscoverage['urllib.js'][23]++;
  exports.RE_JSON_BAD_WORD = /[\u000B\u000C]/gi;
  _$jscoverage['urllib.js'][30]++;
  exports.TIMEOUT = 60000;
  _$jscoverage['urllib.js'][32]++;
  function format_args(args) {
    _$jscoverage['urllib.js'][33]++;
    if (! args) {
      _$jscoverage['urllib.js'][34]++;
      args = {};
    }
    _$jscoverage['urllib.js'][36]++;
    if (! args.timeout) {
      _$jscoverage['urllib.js'][37]++;
      args.timeout = exports.TIMEOUT;
    }
    _$jscoverage['urllib.js'][39]++;
    args.type = (args.type || "GET").toUpperCase();
    _$jscoverage['urllib.js'][40]++;
    return args;
}
  _$jscoverage['urllib.js'][43]++;
  function format_result(args, data, response, callback, context) {
    _$jscoverage['urllib.js'][44]++;
    var error = null;
    _$jscoverage['urllib.js'][45]++;
    var status_code = 0;
    _$jscoverage['urllib.js'][46]++;
    if (response) {
      _$jscoverage['urllib.js'][47]++;
      status_code = response.status || response.statusCode;
    }
    _$jscoverage['urllib.js'][49]++;
    if (status_code === 200 || status_code === 201) {
      _$jscoverage['urllib.js'][50]++;
      if (args.data_type === "json") {
        _$jscoverage['urllib.js'][52]++;
        try {
          _$jscoverage['urllib.js'][53]++;
          data = JSON.parse(data);
        }
        catch (e) {
          _$jscoverage['urllib.js'][55]++;
          error = new Error("JSON format error");
          _$jscoverage['urllib.js'][56]++;
          error.name = "JSONParseError";
          _$jscoverage['urllib.js'][57]++;
          error.data = data;
          _$jscoverage['urllib.js'][58]++;
          error.status_code = status_code;
          _$jscoverage['urllib.js'][59]++;
          data = null;
        }
      }
    }
    else {
      _$jscoverage['urllib.js'][63]++;
      error = data;
      _$jscoverage['urllib.js'][64]++;
      if (typeof error === "string") {
        _$jscoverage['urllib.js'][65]++;
        try {
          _$jscoverage['urllib.js'][66]++;
          error = JSON.parse(data);
          _$jscoverage['urllib.js'][67]++;
          var err = new Error();
          _$jscoverage['urllib.js'][68]++;
          err.name = "HTTPResponseError";
          _$jscoverage['urllib.js'][69]++;
          for (var k in error) {
            _$jscoverage['urllib.js'][70]++;
            err[k] = error[k];
}
          _$jscoverage['urllib.js'][72]++;
          if (! err.message) {
            _$jscoverage['urllib.js'][73]++;
            err.message = error.error || data;
          }
          _$jscoverage['urllib.js'][75]++;
          error = err;
        }
        catch (e) {
          _$jscoverage['urllib.js'][77]++;
          error = new Error(data || "status " + status_code);
          _$jscoverage['urllib.js'][78]++;
          error.name = "JSONParseError";
        }
        _$jscoverage['urllib.js'][80]++;
        error.status_code = status_code;
      }
      _$jscoverage['urllib.js'][82]++;
      data = null;
    }
    _$jscoverage['urllib.js'][84]++;
    if (callback) {
      _$jscoverage['urllib.js'][85]++;
      callback.call(context, error, data, response);
    }
}
  _$jscoverage['urllib.js'][89]++;
  var request;
  _$jscoverage['urllib.js'][90]++;
  if (typeof require !== "undefined") {
    _$jscoverage['urllib.js'][91]++;
    request = require("urllib").request;
  }
  else {
    _$jscoverage['urllib.js'][110]++;
    request = (function (url, args, callback) {
  _$jscoverage['urllib.js'][111]++;
  args = format_args(args);
  _$jscoverage['urllib.js'][112]++;
  var process_data = args.process_data || true;
  _$jscoverage['urllib.js'][113]++;
  if (args.content) {
    _$jscoverage['urllib.js'][114]++;
    process_data = false;
    _$jscoverage['urllib.js'][115]++;
    args.data = args.content;
  }
  _$jscoverage['urllib.js'][117]++;
  $.ajax({url: url, type: args.type, headers: args.headers || {}, data: args.data, processData: process_data, timeout: args.timeout, dataType: "text", success: (function (data, text_status, xhr) {
  _$jscoverage['urllib.js'][126]++;
  callback(null, data, xhr);
}), error: (function (xhr, text_status, err) {
  _$jscoverage['urllib.js'][129]++;
  if (! err) {
    _$jscoverage['urllib.js'][130]++;
    err = new Error(text_status);
    _$jscoverage['urllib.js'][131]++;
    err.name = "AjaxRequestError";
  }
  _$jscoverage['urllib.js'][133]++;
  callback(err, null, xhr);
})});
});
  }
  _$jscoverage['urllib.js'][139]++;
  exports.request = (function (url, args, callback, context) {
  _$jscoverage['urllib.js'][140]++;
  args = format_args(args);
  _$jscoverage['urllib.js'][141]++;
  if (args.user && args.user.proxy) {
    _$jscoverage['urllib.js'][142]++;
    if (args.type === "GET" && args.data) {
      _$jscoverage['urllib.js'][143]++;
      url = utils.urljoin(url, args.data);
      _$jscoverage['urllib.js'][144]++;
      delete args.data;
    }
    _$jscoverage['urllib.js'][146]++;
    url = args.user.proxy + "?url=" + encodeURIComponent(url);
  }
  _$jscoverage['urllib.js'][149]++;
  request(url, args, (function (err, data, res) {
  _$jscoverage['urllib.js'][150]++;
  if (err) {
    _$jscoverage['urllib.js'][151]++;
    return format_result(args, err, res, callback, context);
  }
  _$jscoverage['urllib.js'][153]++;
  if (data && typeof data !== "string") {
    _$jscoverage['urllib.js'][154]++;
    data = data.toString();
  }
  _$jscoverage['urllib.js'][156]++;
  format_result(args, data, res, callback, context);
}));
});
  _$jscoverage['urllib.js'][168]++;
  exports.make_base_auth_header = (function (user, password) {
  _$jscoverage['urllib.js'][169]++;
  var token = user + ":" + password;
  _$jscoverage['urllib.js'][170]++;
  var hash = Base64.encode(token);
  _$jscoverage['urllib.js'][171]++;
  return "Basic " + hash;
});
})();
_$jscoverage['urllib.js'].source = ["(function () {","","var Base64;","var utils;","var root = this; // window on browser","var exports;","if (typeof module === 'undefined') {","  root.weibo = root.weibo || {};","  exports = root.weibo.urllib = {};","  Base64 = root.weibo.base64;","  utils = root.weibo.utils;","} else {","  exports = module.exports;","  Base64 = require('./base64');","  utils = require('./utils');","}","","/**"," * Fixed JSON bad word, more detail see [JSON parse&#229;&#156;&#168;&#229;&#144;&#132;&#230;&#181;&#143;&#232;&#167;&#136;&#229;&#153;&#168;&#231;&#154;&#132;&#229;&#133;&#188;&#229;&#174;&#185;&#230;&#128;&#167;&#229;&#136;&#151;&#232;&#161;&#168;](http://www.cnblogs.com/rubylouvre/archive/2011/02/12/1951760.html)"," * @type {String}"," * @const"," */","exports.RE_JSON_BAD_WORD = /[\\u000B\\u000C]/ig; ","","/**"," * The default request timeout(in milliseconds)"," * @type {Object.&lt;Number&gt;}"," * @const"," */","exports.TIMEOUT = 60000;","","function format_args(args) {","  if (!args) {","    args = {};","  }","  if (!args.timeout) {","    args.timeout = exports.TIMEOUT;","  }","  args.type = (args.type || 'GET').toUpperCase();","  return args;","}","","function format_result(args, data, response, callback, context) {","  var error = null;","  var status_code = 0;","  if (response) {","    status_code = response.status || response.statusCode;","  }","  if (status_code === 200 || status_code === 201) {","    if (args.data_type === 'json') {","      //data = data.replace(RE_JSON_BAD_WORD, '');","      try {","        data = JSON.parse(data);","      } catch(e) {","        error = new Error('JSON format error');","        error.name = 'JSONParseError';","        error.data = data;","        error.status_code = status_code;","        data = null;","      }","    }","  } else {","    error = data;","    if (typeof error === 'string') {","      try {","        error = JSON.parse(data);","        var err = new Error();","        err.name = 'HTTPResponseError';","        for (var k in error) {","          err[k] = error[k];","        }","        if (!err.message) {","          err.message = error.error || data;","        }","        error = err;","      } catch (e) {","        error = new Error(data || 'status ' + status_code);","        error.name = 'JSONParseError';","      }","      error.status_code = status_code;","    }","    data = null;","  }","  if (callback) {","    callback.call(context, error, data, response);","  }","}","","var request;","if (typeof require !== 'undefined') {","  request = require('urllib').request;","} else {  ","  /**","   * &#229;&#176;&#129;&#232;&#163;&#133;&#230;&#137;&#128;&#230;&#156;&#137;http&#232;&#175;&#183;&#230;&#177;&#130;&#239;&#188;&#140;&#232;&#135;&#170;&#229;&#138;&#168;&#229;&#140;&#186;&#229;&#136;&#134;&#229;&#164;&#132;&#231;&#144;&#134;http&#229;&#146;&#140;https","   * ","   * @require jQuery","   * @param {String} url","   * @param {Object} args","   *   - data: request data","   *   - content: optional, if set content, `data` will ignore","   *   - type: optional, could be GET | POST | DELETE | PUT, default is GET","   *   - data_type: `text` or `json`, default is text","   *   - process_data: process data or not","   *   - headers: http request headers","   *   - timeout: request timeout, default is urllib.TIMEOUT(60 seconds)","   * @param {Function} callback","   * @param {Object} optional context of callback, callback.call(context, data, error, res)","   * @api public","   */","  request = function (url, args, callback) {","    args = format_args(args);","    var process_data = args.process_data || true;","    if (args.content) {","      process_data = false;","      args.data = args.content;","    }","    $.ajax({","      url: url,","      type: args.type, ","      headers: args.headers || {}, ","      data: args.data, ","      processData: process_data,","      timeout: args.timeout, ","      dataType: 'text', ","      success: function (data, text_status, xhr) {","        callback(null, data, xhr);","      }, ","      error: function (xhr, text_status, err) {","        if (!err) {","          err = new Error(text_status);","          err.name = 'AjaxRequestError';","        }","        callback(err, null, xhr);","      }","    });","  };","}","","exports.request = function (url, args, callback, context) {","  args = format_args(args);","  if (args.user &amp;&amp; args.user.proxy) {","    if (args.type === 'GET' &amp;&amp; args.data) {","      url = utils.urljoin(url, args.data);","      delete args.data;","    }","    url = args.user.proxy + '?url=' + encodeURIComponent(url);","  }","  // console.log(url, args)","  request(url, args, function (err, data, res) {","    if (err) {","      return format_result(args, err, res, callback, context);","    }","    if (data &amp;&amp; typeof data !== 'string') {","      data = data.toString();","    }","    format_result(args, data, res, callback, context);","  });","};","","/**"," * &#231;&#148;&#159;&#230;&#136;&#144;HTTP Basic Authentication&#231;&#154;&#132;&#229;&#173;&#151;&#231;&#172;&#166;&#228;&#184;&#178;&#239;&#188;&#154;\"Base base64String\""," * "," * @param {String} user"," * @param {String} password "," * @return {String} 'Basic xxxxxxxxxxxxxxxx'"," * @api public"," */","exports.make_base_auth_header = function (user, password) {","  var token = user + ':' + password;","  var hash = Base64.encode(token);","  return \"Basic \" + hash;","};","","","})();"];

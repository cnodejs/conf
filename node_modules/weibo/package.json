{
  "name": "weibo",
  "version": "0.5.0",
  "description": "Weibo SDK, base on node. Now support weibo, tqq, tsohu, twitter and github.",
  "repository": {
    "type": "git",
    "url": "git://github.com/fengmk2/node-weibo.git"
  },
  "author": {
    "name": "fengmk2",
    "email": "fengmk2@gmail.com",
    "url": "http://fengmk2.cnblogs.com"
  },
  "main": "index",
  "contributors": [
    {
      "name": "fengmk2",
      "email": "fengmk2@gmail.com"
    },
    {
      "name": "hpf1908",
      "email": "hpf1908@gmail.com"
    }
  ],
  "scripts": {
    "test": "make test"
  },
  "devDependencies": {
    "should": "*",
    "mocha": "*"
  },
  "dependencies": {
    "urllib": ">=0.2.6"
  },
  "keywords": [
    "framework",
    "sinatra",
    "web",
    "rest",
    "restful",
    "weibo",
    "sdk"
  ],
  "engines": {
    "node": ">= 0.4.1"
  },
  "readme": "# node-weibo: A weibo(like twitter) API SDK, use on browser client and nodejs server.\n\n[![Build Status](https://secure.travis-ci.org/fengmk2/node-weibo.png?branch=master)](http://travis-ci.org/fengmk2/node-weibo)\n\n## Supports:\n * twitter: [http://twitter.com/](http://twitter.com/)\n * facebook: [http://facebook.com/](http://facebook.com/)\n * fanfou: [http://fanfou.com/](http://fanfou.com/)\n * digu: [http://digu.com/](http://digu.com/)\n * zuosa: [http://zuosa.com/](http://zuosa.com/)\n * weibo: [http://t.sina.com.cn/](http://weibo.com/)\n * tqq: [http://t.qq.com/](http://t.qq.com/)\n * tsohu: [http://t.sohu.com/](http://t.sohu.com/)\n * t163: [http://t.163.com/](http://t.163.com/)\n * renjian: [http://renjian.com/](http://renjian.com/)\n * leihou: [http://leihou.com/](http://leihou.com/)\n * plurk: [http://plurk.com/](http://plurk.com/)\n\nnode-weibo API base on weibo API document: [http://open.weibo.com/](http://open.weibo.com/)\n\n## Requires:\n * (working)browser client: jquery(for ajax request), browser must enable cross-domain request.\n * server: nodejs\n\n## Nodejs Install\n\n```bash\n$ npm install weibo\n```\n\n## How to use\n\n### Browser: `Phonegap` or `Chrome extension`\n\n* require `jQuery`\n\n```javascript\n// Include the javascript files:\n\n<script src=\"lib/weibo/lib/eventproxy.js\"></script>\n<script src=\"lib/weibo/lib/base64.js\"></script>\n<script src=\"lib/weibo/lib/sha1.js\"></script>\n<script src=\"lib/weibo/lib/utils.js\"></script>\n<script src=\"lib/weibo/lib/oauth.js\"></script>\n<script src=\"lib/weibo/lib/urllib.js\"></script>\n<script src=\"lib/weibo/lib/tsina.js\"></script>\n<script src=\"lib/weibo/lib/tapi.js\"></script>\n<script type=\"text/javascript\">\nvar tapi = weibo.TAPI;\nvar appkey = 'your appkey', secret = 'your app secret';\nvar oauth_callback_url = 'your callback url' || 'oob';\ntapi.init('tsina', appkey, secret, oauth_callback_url);\ntapi.public_timeline({ user: { blogType: 'tsina' } }, function (err, statuses) {\n  if (err) {\n    console.error(error);\n  } else {\n    console.log(statuses);\n  }\n});\n</script>\n```\n\n### Server\n\n```javascript\n\nvar tapi = require('weibo');\n\n// change appkey to yours\nvar appkey = 'your appkey', secret = 'your app secret';\nvar oauth_callback_url = 'your callback url' || 'oob';\ntapi.init('tsina', appkey, secret, oauth_callback_url);\n\ntapi.public_timeline({ user: { blogType: 'tsina' } }, function (err, statuses) {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(statuses);\n  }\n});\n```\n    \n### Use oauth_middleware\n\nhandler oauth login middleware, use on connect, express.\n\n```javascript\n/**\n * oauth middleware for connect\n *\n * example:\n *\n *  connect(\n *    connect.query(),\n *    connect.cookieParser('I\\'m cookie secret.'),\n *    connect.session({ secret: \"oh year a secret\" }),\n *    weibo.oauth()\n *  );\n *\n * @param {Object} options\n *   - `homeUrl`: use to create login success oauth_callback url with referer header, \n *     default is `'http://' + req.headers.host`;\n *   - `loginPath`: login url, default is '/oauth'\n *   - `logoutPath`: default is '/oauth/logout'\n *   - `callbackPath`: default is login_path + '/callback'\n *   - `blogtypeField`: default is 'type', \n *     if you want to connect weibo, login url should be '/oauth?type=weibo'\n */\n```\n    \nExample: A simple web with oauth login.\n\n```js\nvar connect = require('connect');\nvar weibo = require('../');\n\n/**\n * init weibo api settings\n */ \n\nweibo.init('weibo', '$appkey', '$secret');\nweibo.init('tqq', '$appkey', '$secret');\nweibo.init('github', '$ClientID', '$ClientSecret');\n\n/**\n * Create a web application.\n */\n\nvar app = connect(\n  connect.query(),\n  connect.cookieParser('oh year a cookie secret'),\n  connect.session({ secret: \"oh year a secret\" }),\n  // using weibo.oauth middleware for use login\n  // will auto save user in req.session.oauthUser\n  weibo.oauth({\n    loginPath: '/login',\n    logoutPath: '/logout',\n    blogtypeField: 'type'\n  }),\n  connect.errorHandler({ stack: true, dump: true })\n);\n\napp.use('/', function (req, res, next) {\n  var user = req.session.oauthUser;\n  res.writeHeader(200, { 'Content-Type': 'text/html' });\n  if (!user) {\n    res.end('Login with <a href=\"/login?type=weibo\">Weibo</a> | \\\n      <a href=\"/login?type=tqq\">QQ</a> | \\\n      <a href=\"/login?type=github\">Github</a>');\n    return;\n  }\n  res.end('Hello, <img src=\"' + user.profile_image_url + '\" />\\\n    <a href=\"' + user.t_url + \n    '\" target=\"_blank\">@' + user.screen_name + '</a>. ' + \n    '<a href=\"/logout\">Logout</a>');\n});\n\napp.listen(8088);\nconsole.log('Server start on http://localhost:8088/');\n```\n\n## Authors\n\nBelow is the output from `git-summary`.\n\n```\n project: node-weibo\n commits: 102\n active : 49 days\n files  : 49\n authors: \n    91  fengmk2                 89.2%\n     7  hpf1908                 6.9%\n     2  QLeelulu                2.0%\n     1  mk2                     1.0%\n     1  xydudu                  1.0%\n```\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2011-2012 fengmk2 &lt;fengmk2@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "_id": "weibo@0.5.0",
  "dist": {
    "shasum": "bc36185fc63e3945d5851d70d435024ab4cab127"
  },
  "_from": "weibo"
}
